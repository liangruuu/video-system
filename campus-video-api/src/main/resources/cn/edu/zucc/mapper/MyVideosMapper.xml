<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.edu.zucc.mapper.MyVideosMapper">
  <resultMap id="BaseResultMap" type="cn.edu.zucc.vo.VideosVO">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" property="id" jdbcType="VARCHAR"/>
    <result column="user_id" property="userId" jdbcType="VARCHAR"/>
    <result column="bgm_id" property="bgmId" jdbcType="VARCHAR"/>
    <result column="video_name" property="videoName" jdbcType="VARCHAR"/>
    <result column="video_desc" property="videoDesc" jdbcType="VARCHAR"/>
    <result column="video_path" property="videoPath" jdbcType="VARCHAR"/>
    <result column="video_seconds" property="videoSeconds" jdbcType="REAL"/>
    <result column="video_weight" property="videoWeight" jdbcType="INTEGER"/>
    <result column="video_height" property="videoHeight" jdbcType="INTEGER"/>
    <result column="cover_path" property="coverPath" jdbcType="VARCHAR"/>
    <result column="like_counts" property="likeCounts" jdbcType="BIGINT"/>
    <result column="browse_counts" property="browseCounts" jdbcType="BIGINT"/>
    <result column="collect_counts" property="collectCounts" jdbcType="BIGINT"/>
    <result column="status" property="status" jdbcType="INTEGER"/>
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
    <result column="avatar" property="avatar" jdbcType="VARCHAR"/>
    <result column="nickname" property="nickname" jdbcType="VARCHAR"/>
    <result column="tags" property="tags" jdbcType="VARCHAR"/>
  </resultMap>

  <!--查询出videos表中的所有元素和每个video对应user的avatar和nickname，并且若video处于封禁状态则不予查询（按照创建时间降序排序）-->
  <select id="queryVideoList" resultMap="BaseResultMap" parameterType="String">
    select v.*, u.avatar as avatar, u.nickname as nickname from videos v
    left join users u on u.id = v.user_id
    where
    1 = 1
    <if test=" keyword != null and keyword != '' ">
      and v.video_name like '%${keyword}%'
    </if>
    <if test=" userId != null and userId != '' ">
      and v.user_id = #{userId}
    </if>
    <if test=" categoryId != null and categoryId != '' ">
      and v.category_id = #{categoryId}
    </if>
    <if test=" tags != null and tags != '' ">
      and v.tags = #{tags}
    </if>
    and v.status = 1
    order by v.create_time desc
  </select>

  <select id="queryRecommendVideos" resultMap="BaseResultMap" parameterType="String">
    select v.*, u.avatar as avatar, u.nickname as nickname
    from videos v
           left join users u on v.user_id = u.id
    where v.id = #{videoId}
  </select>

  <select id="queryCollectVideos" resultMap="BaseResultMap" parameterType="String">
    select v.*, u.avatar as avatar, u.nickname as nickname
    from videos v
           left join users u on v.user_id = u.id
    where v.id in (select ucv.video_id from users_collect_videos ucv where ucv.user_id = #{userId})
      and v.status = 1
    order by v.create_time desc
  </select>

  <update id="addVideoLikeCount" parameterType="String">
    update videos
    set like_counts=like_counts + 1,
        update_time=now()
    where id = #{videoId}
  </update>

  <update id="reduceVideoLikeCount" parameterType="String">
    update videos
    set like_counts=like_counts - 1,
        update_time=now()
    where id = #{videoId}
  </update>

  <update id="addVideoCollectCount" parameterType="String">
    update videos
    set collect_counts=collect_counts + 1,
        update_time=now()
    where id = #{videoId}
  </update>

  <update id="reduceVideoCollectCount" parameterType="String">
    update videos
    set collect_counts=collect_counts - 1,
        update_time=now()
    where id = #{videoId}
  </update>

  <update id="addVideoBrowseCounts" parameterType="String">
    update videos
    set browse_counts=browse_counts + 1,
        update_time=now()
    where id = #{videoId}
  </update>

  <select id="buildESQuery" resultType="java.util.Map">
    select v.id,v.video_name, v.video_desc, v.video_seconds, v.like_counts, v.browse_counts,v.user_id,
    v.collect_counts, v.category_id, v.tags, v.status, c.name as category_name,u.avatar as avatar, u.nickname as
    nickname from videos v
    inner join category c on v.category_id = c.id
    inner join users u on u.id = v.user_id
    <if test="videoId != null">
      and v.id = #{videoId}
    </if>
    <if test="categoryId != null">
      and c.id = #{categoryId}
    </if>
  </select>

  <select id="queryVideoListES" resultMap="BaseResultMap" parameterType="String">
    select v.*, u.avatar as avatar, u.nickname as nickname
    from videos v
           left join users u on u.id = v.user_id
    where v.id = #{videoId}
  </select>

  <update id="deleteVideo" parameterType="String">
    update videos as v
    set v.status=3
    where id = #{videoId}
  </update>

  <update id="updateVideo" parameterType="cn.edu.zucc.req.ModifyReq">
    update videos as v
    <set>
      <if test="videoName != null and videoName != ''">
        video_name=#{videoName,jdbcType=VARCHAR},
      </if>
      <if test="videoDesc != null and videoDesc != ''">
        video_desc=#{videoDesc,jdbcType=VARCHAR},
      </if>
    </set>
    where v.id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>